# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserSignupBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, username: str=None, password: str=None, confirm_password: str=None, pfp: str=None, bio: str=None, interests: List[str]=None):  # noqa: E501
        """UserSignupBody - a model defined in Swagger

        :param username: The username of this UserSignupBody.  # noqa: E501
        :type username: str
        :param password: The password of this UserSignupBody.  # noqa: E501
        :type password: str
        :param confirm_password: The confirm_password of this UserSignupBody.  # noqa: E501
        :type confirm_password: str
        :param pfp: The pfp of this UserSignupBody.  # noqa: E501
        :type pfp: str
        :param bio: The bio of this UserSignupBody.  # noqa: E501
        :type bio: str
        :param interests: The interests of this UserSignupBody.  # noqa: E501
        :type interests: List[str]
        """
        self.swagger_types = {
            'username': str,
            'password': str,
            'confirm_password': str,
            'pfp': str,
            'bio': str,
            'interests': List[str]
        }

        self.attribute_map = {
            'username': 'username',
            'password': 'password',
            'confirm_password': 'confirm_password',
            'pfp': 'pfp',
            'bio': 'bio',
            'interests': 'interests'
        }
        self._username = username
        self._password = password
        self._confirm_password = confirm_password
        self._pfp = pfp
        self._bio = bio
        self._interests = interests

    @classmethod
    def from_dict(cls, dikt) -> 'UserSignupBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user_signup_body of this UserSignupBody.  # noqa: E501
        :rtype: UserSignupBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this UserSignupBody.


        :return: The username of this UserSignupBody.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this UserSignupBody.


        :param username: The username of this UserSignupBody.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this UserSignupBody.


        :return: The password of this UserSignupBody.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this UserSignupBody.


        :param password: The password of this UserSignupBody.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def confirm_password(self) -> str:
        """Gets the confirm_password of this UserSignupBody.


        :return: The confirm_password of this UserSignupBody.
        :rtype: str
        """
        return self._confirm_password

    @confirm_password.setter
    def confirm_password(self, confirm_password: str):
        """Sets the confirm_password of this UserSignupBody.


        :param confirm_password: The confirm_password of this UserSignupBody.
        :type confirm_password: str
        """
        if confirm_password is None:
            raise ValueError("Invalid value for `confirm_password`, must not be `None`")  # noqa: E501

        self._confirm_password = confirm_password

    @property
    def pfp(self) -> str:
        """Gets the pfp of this UserSignupBody.


        :return: The pfp of this UserSignupBody.
        :rtype: str
        """
        return self._pfp

    @pfp.setter
    def pfp(self, pfp: str):
        """Sets the pfp of this UserSignupBody.


        :param pfp: The pfp of this UserSignupBody.
        :type pfp: str
        """
        if pfp is None:
            raise ValueError("Invalid value for `pfp`, must not be `None`")  # noqa: E501

        self._pfp = pfp

    @property
    def bio(self) -> str:
        """Gets the bio of this UserSignupBody.


        :return: The bio of this UserSignupBody.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio: str):
        """Sets the bio of this UserSignupBody.


        :param bio: The bio of this UserSignupBody.
        :type bio: str
        """
        if bio is None:
            raise ValueError("Invalid value for `bio`, must not be `None`")  # noqa: E501

        self._bio = bio

    @property
    def interests(self) -> List[str]:
        """Gets the interests of this UserSignupBody.


        :return: The interests of this UserSignupBody.
        :rtype: List[str]
        """
        return self._interests

    @interests.setter
    def interests(self, interests: List[str]):
        """Sets the interests of this UserSignupBody.


        :param interests: The interests of this UserSignupBody.
        :type interests: List[str]
        """
        if interests is None:
            raise ValueError("Invalid value for `interests`, must not be `None`")  # noqa: E501

        self._interests = interests
