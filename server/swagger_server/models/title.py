# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Title(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, title: str=None, year: int=None, genre: str=None, director: str=None, writer: str=None, cast: List[str]=None, rating: float=None, poster: str=None):  # noqa: E501
        """Title - a model defined in Swagger

        :param title: The title of this Title.  # noqa: E501
        :type title: str
        :param year: The year of this Title.  # noqa: E501
        :type year: int
        :param genre: The genre of this Title.  # noqa: E501
        :type genre: str
        :param director: The director of this Title.  # noqa: E501
        :type director: str
        :param writer: The writer of this Title.  # noqa: E501
        :type writer: str
        :param cast: The cast of this Title.  # noqa: E501
        :type cast: List[str]
        :param rating: The rating of this Title.  # noqa: E501
        :type rating: float
        :param poster: The poster of this Title.  # noqa: E501
        :type poster: str
        """
        self.swagger_types = {
            'title': str,
            'year': int,
            'genre': str,
            'director': str,
            'writer': str,
            'cast': List[str],
            'rating': float,
            'poster': str
        }

        self.attribute_map = {
            'title': 'title',
            'year': 'year',
            'genre': 'genre',
            'director': 'director',
            'writer': 'writer',
            'cast': 'cast',
            'rating': 'rating',
            'poster': 'poster'
        }
        self._title = title
        self._year = year
        self._genre = genre
        self._director = director
        self._writer = writer
        self._cast = cast
        self._rating = rating
        self._poster = poster

    @classmethod
    def from_dict(cls, dikt) -> 'Title':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Title of this Title.  # noqa: E501
        :rtype: Title
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self) -> str:
        """Gets the title of this Title.


        :return: The title of this Title.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Title.


        :param title: The title of this Title.
        :type title: str
        """

        self._title = title

    @property
    def year(self) -> int:
        """Gets the year of this Title.


        :return: The year of this Title.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year: int):
        """Sets the year of this Title.


        :param year: The year of this Title.
        :type year: int
        """

        self._year = year

    @property
    def genre(self) -> str:
        """Gets the genre of this Title.


        :return: The genre of this Title.
        :rtype: str
        """
        return self._genre

    @genre.setter
    def genre(self, genre: str):
        """Sets the genre of this Title.


        :param genre: The genre of this Title.
        :type genre: str
        """

        self._genre = genre

    @property
    def director(self) -> str:
        """Gets the director of this Title.


        :return: The director of this Title.
        :rtype: str
        """
        return self._director

    @director.setter
    def director(self, director: str):
        """Sets the director of this Title.


        :param director: The director of this Title.
        :type director: str
        """

        self._director = director

    @property
    def writer(self) -> str:
        """Gets the writer of this Title.


        :return: The writer of this Title.
        :rtype: str
        """
        return self._writer

    @writer.setter
    def writer(self, writer: str):
        """Sets the writer of this Title.


        :param writer: The writer of this Title.
        :type writer: str
        """

        self._writer = writer

    @property
    def cast(self) -> List[str]:
        """Gets the cast of this Title.


        :return: The cast of this Title.
        :rtype: List[str]
        """
        return self._cast

    @cast.setter
    def cast(self, cast: List[str]):
        """Sets the cast of this Title.


        :param cast: The cast of this Title.
        :type cast: List[str]
        """

        self._cast = cast

    @property
    def rating(self) -> float:
        """Gets the rating of this Title.


        :return: The rating of this Title.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating: float):
        """Sets the rating of this Title.


        :param rating: The rating of this Title.
        :type rating: float
        """

        self._rating = rating

    @property
    def poster(self) -> str:
        """Gets the poster of this Title.


        :return: The poster of this Title.
        :rtype: str
        """
        return self._poster

    @poster.setter
    def poster(self, poster: str):
        """Sets the poster of this Title.


        :param poster: The poster of this Title.
        :type poster: str
        """

        self._poster = poster
