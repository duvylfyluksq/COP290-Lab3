{"ast":null,"code":"/*\n * FMD\n * A website for movies' and TV shows' reviews\n *\n * OpenAPI spec version: 3.0.0\n * Contact: om.dehlantube@gmail.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 3.0.41\n *\n * Do not edit the class manually.\n *\n */\nimport superagent from \"superagent\";\nimport querystring from \"querystring\";\n\n/**\n* @module ApiClient\n* @version 3.0.0\n*/\n\n/**\n* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n* application to use this class directly - the *Api and model classes provide the public API for the service. The\n* contents of this file should be regarded as internal but are documented for completeness.\n* @alias module:ApiClient\n* @class\n*/\nexport class ApiClient {\n  constructor() {\n    /**\n     * The base URL against which to resolve every API call's (relative) path.\n     * @type {String}\n     * @default https://virtserver.swaggerhub.com/VEDANTANEOGI_1/FMD_API3.0/3.0.0\n     */\n    this.basePath = 'http://localhost:8080/VEDANTANEOGI_1/FMD_API3.0/3.0.0'.replace(/\\/+$/, '');\n\n    /**\n     * The authentication methods to be included for all API calls.\n     * @type {Array.<String>}\n     */\n    this.authentications = {};\n\n    /**\n     * The default HTTP headers to be included for all API calls.\n     * @type {Array.<String>}\n     * @default {}\n     */\n    this.defaultHeaders = {};\n\n    /**\n     * The default HTTP timeout for all API calls.\n     * @type {Number}\n     * @default 60000\n     */\n    this.timeout = 60000;\n\n    /**\n     * If set to false an additional timestamp parameter is added to all API GET calls to\n     * prevent browser caching\n     * @type {Boolean}\n     * @default true\n     */\n    this.cache = true;\n\n    /**\n     * If set to true, the client will save the cookies from each server\n     * response, and return them in the next request.\n     * @default false\n     */\n    this.enableCookies = false;\n\n    /*\n     * Used to save and return cookies in a node.js (non-browser) setting,\n     * if this.enableCookies is set to true.\n     */\n    if (typeof window === 'undefined') {\n      this.agent = new superagent.agent();\n    }\n\n    /*\n     * Allow user to override superagent agent\n     */\n    this.requestAgent = null;\n  }\n\n  /**\n  * Returns a string representation for an actual parameter.\n  * @param param The actual parameter.\n  * @returns {String} The string representation of <code>param</code>.\n  */\n  paramToString(param) {\n    if (param == undefined || param == null) {\n      return '';\n    }\n    if (param instanceof Date) {\n      return param.toJSON();\n    }\n    return param.toString();\n  }\n\n  /**\n  * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n  * NOTE: query parameters are not handled here.\n  * @param {String} path The path to append to the base URL.\n  * @param {Object} pathParams The parameter values to append.\n  * @returns {String} The encoded path with parameter values substituted.\n  */\n  buildUrl(path, pathParams) {\n    if (!path.match(/^\\//)) {\n      path = '/' + path;\n    }\n    var url = this.basePath + path;\n    url = url.replace(/\\{([\\w-]+)\\}/g, (fullMatch, key) => {\n      var value;\n      if (pathParams.hasOwnProperty(key)) {\n        value = this.paramToString(pathParams[key]);\n      } else {\n        value = fullMatch;\n      }\n      return encodeURIComponent(value);\n    });\n    return url;\n  }\n\n  /**\n  * Checks whether the given content type represents JSON.<br>\n  * JSON content type examples:<br>\n  * <ul>\n  * <li>application/json</li>\n  * <li>application/json; charset=UTF8</li>\n  * <li>APPLICATION/JSON</li>\n  * </ul>\n  * @param {String} contentType The MIME content type to check.\n  * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n  */\n  isJsonMime(contentType) {\n    return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n  }\n\n  /**\n  * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n  * @param {Array.<String>} contentTypes\n  * @returns {String} The chosen content type, preferring JSON.\n  */\n  jsonPreferredMime(contentTypes) {\n    for (var i = 0; i < contentTypes.length; i++) {\n      if (this.isJsonMime(contentTypes[i])) {\n        return contentTypes[i];\n      }\n    }\n    return contentTypes[0];\n  }\n\n  /**\n  * Checks whether the given parameter value represents file-like content.\n  * @param param The parameter to check.\n  * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n  */\n  isFileParam(param) {\n    // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n    if (typeof require === 'function') {\n      let fs;\n      try {\n        fs = require('fs');\n      } catch (err) {}\n      if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n        return true;\n      }\n    }\n\n    // Buffer in Node.js\n    if (typeof Buffer === 'function' && param instanceof Buffer) {\n      return true;\n    }\n\n    // Blob in browser\n    if (typeof Blob === 'function' && param instanceof Blob) {\n      return true;\n    }\n\n    // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n    if (typeof File === 'function' && param instanceof File) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n  * Normalizes parameter values:\n  * <ul>\n  * <li>remove nils</li>\n  * <li>keep files and arrays</li>\n  * <li>format to string with `paramToString` for other cases</li>\n  * </ul>\n  * @param {Object.<String, Object>} params The parameters as object properties.\n  * @returns {Object.<String, Object>} normalized parameters.\n  */\n  normalizeParams(params) {\n    var newParams = {};\n    for (var key in params) {\n      if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n        var value = params[key];\n        if (this.isFileParam(value) || Array.isArray(value)) {\n          newParams[key] = value;\n        } else {\n          newParams[key] = this.paramToString(value);\n        }\n      }\n    }\n    return newParams;\n  }\n\n  /**\n  * Enumeration of collection format separator strategies.\n  * @enum {String}\n  * @readonly\n  */\n\n  /**\n  * Builds a string representation of an array-type actual parameter, according to the given collection format.\n  * @param {Array} param An array parameter.\n  * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n  * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n  * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n  */\n  buildCollectionParam(param, collectionFormat) {\n    if (param == null) {\n      return null;\n    }\n    switch (collectionFormat) {\n      case 'csv':\n        return param.map(this.paramToString).join(',');\n      case 'ssv':\n        return param.map(this.paramToString).join(' ');\n      case 'tsv':\n        return param.map(this.paramToString).join('\\t');\n      case 'pipes':\n        return param.map(this.paramToString).join('|');\n      case 'multi':\n        //return the array directly as SuperAgent will handle it as expected\n        return param.map(this.paramToString);\n      default:\n        throw new Error('Unknown collection format: ' + collectionFormat);\n    }\n  }\n\n  /**\n  * Applies authentication headers to the request.\n  * @param {Object} request The request object created by a <code>superagent()</code> call.\n  * @param {Array.<String>} authNames An array of authentication method names.\n  */\n  applyAuthToRequest(request, authNames) {\n    authNames.forEach(authName => {\n      var auth = this.authentications[authName];\n      switch (auth.type) {\n        case 'basic':\n          if (auth.username || auth.password) {\n            request.auth(auth.username || '', auth.password || '');\n          }\n          break;\n        case 'apiKey':\n          if (auth.apiKey) {\n            var data = {};\n            if (auth.apiKeyPrefix) {\n              data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n            } else {\n              data[auth.name] = auth.apiKey;\n            }\n            if (auth['in'] === 'header') {\n              request.set(data);\n            } else {\n              request.query(data);\n            }\n          }\n          break;\n        case 'oauth2':\n          if (auth.accessToken) {\n            request.set({\n              'Authorization': 'Bearer ' + auth.accessToken\n            });\n          }\n          break;\n        default:\n          throw new Error('Unknown authentication type: ' + auth.type);\n      }\n    });\n  }\n\n  /**\n  * Deserializes an HTTP response body into a value of the specified type.\n  * @param {Object} response A SuperAgent response object.\n  * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n  * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n  * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n  * all properties on <code>data<code> will be converted to this type.\n  * @returns A value of the specified type.\n  */\n  deserialize(response, returnType) {\n    if (response == null || returnType == null || response.status == 204) {\n      return null;\n    }\n\n    // Rely on SuperAgent for parsing response body.\n    // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n    var data = response.body;\n    if (data == null || typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length) {\n      // SuperAgent does not always produce a body; use the unparsed response as a fallback\n      data = response.text;\n    }\n    return ApiClient.convertToType(data, returnType);\n  }\n\n  /**\n  * Callback function to receive the result of the operation.\n  * @callback module:ApiClient~callApiCallback\n  * @param {String} error Error message, if any.\n  * @param data The data returned by the service call.\n  * @param {String} response The complete HTTP response.\n  */\n\n  /**\n  * Invokes the REST service using the supplied settings and parameters.\n  * @param {String} path The base URL to invoke.\n  * @param {String} httpMethod The HTTP method to use.\n  * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n  * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n  * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n  * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n  * @param {Object} bodyParam The value to pass as the request body.\n  * @param {Array.<String>} authNames An array of authentication type names.\n  * @param {Array.<String>} contentTypes An array of request MIME types.\n  * @param {Array.<String>} accepts An array of acceptable response MIME types.\n  * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n  * constructor for a complex type.\n  * @param {module:ApiClient~callApiCallback} callback The callback function.\n  * @returns {Object} The SuperAgent request object.\n  */\n  callApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, returnType, callback) {\n    var url = this.buildUrl(path, pathParams);\n    var request = superagent(httpMethod, url);\n\n    // apply authentications\n    this.applyAuthToRequest(request, authNames);\n\n    // set query parameters\n    if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n      queryParams['_'] = new Date().getTime();\n    }\n    request.query(this.normalizeParams(queryParams));\n\n    // set header parameters\n    request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n    // set requestAgent if it is set by user\n    if (this.requestAgent) {\n      request.agent(this.requestAgent);\n    }\n\n    // set request timeout\n    request.timeout(this.timeout);\n    var contentType = this.jsonPreferredMime(contentTypes);\n    if (contentType) {\n      // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n      if (contentType != 'multipart/form-data') {\n        request.type(contentType);\n      }\n    } else if (!request.header['Content-Type']) {\n      request.type('application/json');\n    }\n    if (contentType === 'application/x-www-form-urlencoded') {\n      request.send(querystring.stringify(this.normalizeParams(formParams)));\n    } else if (contentType == 'multipart/form-data') {\n      var _formParams = this.normalizeParams(formParams);\n      for (var key in _formParams) {\n        if (_formParams.hasOwnProperty(key)) {\n          if (this.isFileParam(_formParams[key])) {\n            // file field\n            request.attach(key, _formParams[key]);\n          } else {\n            request.field(key, _formParams[key]);\n          }\n        }\n      }\n    } else if (bodyParam) {\n      request.send(bodyParam);\n    }\n    var accept = this.jsonPreferredMime(accepts);\n    if (accept) {\n      request.accept(accept);\n    }\n    if (returnType === 'Blob') {\n      request.responseType('blob');\n    } else if (returnType === 'String') {\n      request.responseType('string');\n    }\n\n    // Attach previously saved cookies, if enabled\n    if (this.enableCookies) {\n      if (typeof window === 'undefined') {\n        this.agent.attachCookies(request);\n      } else {\n        request.withCredentials();\n      }\n    }\n    request.end((error, response) => {\n      if (callback) {\n        var data = null;\n        if (!error) {\n          try {\n            data = this.deserialize(response, returnType);\n            if (this.enableCookies && typeof window === 'undefined') {\n              this.agent.saveCookies(response);\n            }\n          } catch (err) {\n            error = err;\n          }\n        }\n        callback(error, data, response);\n      }\n    });\n    return request;\n  }\n\n  /**\n  * Parses an ISO-8601 string representation of a date value.\n  * @param {String} str The date value as a string.\n  * @returns {Date} The parsed date object.\n  */\n  static parseDate(str) {\n    return new Date(str);\n  }\n\n  /**\n  * Converts a value to the specified type.\n  * @param {(String|Object)} data The data to convert, as a string or object.\n  * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n  * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n  * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n  * all properties on <code>data<code> will be converted to this type.\n  * @returns An instance of the specified type or null or undefined if data is null or undefined.\n  */\n  static convertToType(data, type) {\n    if (data === null || data === undefined) return data;\n    switch (type) {\n      case 'Boolean':\n        return Boolean(data);\n      case 'Integer':\n        return parseInt(data, 10);\n      case 'Number':\n        return parseFloat(data);\n      case 'String':\n        return String(data);\n      case 'Date':\n        return ApiClient.parseDate(String(data));\n      case 'Blob':\n        return data;\n      default:\n        if (type === Object) {\n          // generic object, return directly\n          return data;\n        } else if (typeof type === 'function') {\n          // for model type like: User\n          return type.constructFromObject(data);\n        } else if (Array.isArray(type)) {\n          // for array type like: ['String']\n          var itemType = type[0];\n          return data.map(item => {\n            return ApiClient.convertToType(item, itemType);\n          });\n        } else if (typeof type === 'object') {\n          // for plain object type like: {'String': 'Integer'}\n          var keyType, valueType;\n          for (var k in type) {\n            if (type.hasOwnProperty(k)) {\n              keyType = k;\n              valueType = type[k];\n              break;\n            }\n          }\n          var result = {};\n          for (var k in data) {\n            if (data.hasOwnProperty(k)) {\n              var key = ApiClient.convertToType(k, keyType);\n              var value = ApiClient.convertToType(data[k], valueType);\n              result[key] = value;\n            }\n          }\n          return result;\n        } else {\n          // for unknown type, return the data directly\n          return data;\n        }\n    }\n  }\n\n  /**\n  * Constructs a new map or array model from REST data.\n  * @param data {Object|Array} The REST data.\n  * @param obj {Object|Array} The target object or array.\n  */\n  static constructFromObject(data, obj, itemType) {\n    if (Array.isArray(data)) {\n      for (var i = 0; i < data.length; i++) {\n        if (data.hasOwnProperty(i)) obj[i] = ApiClient.convertToType(data[i], itemType);\n      }\n    } else {\n      for (var k in data) {\n        if (data.hasOwnProperty(k)) obj[k] = ApiClient.convertToType(data[k], itemType);\n      }\n    }\n  }\n}\n\n/**\n* The default API client implementation.\n* @type {module:ApiClient}\n*/\nApiClient.CollectionFormatEnum = {\n  /**\n   * Comma-separated values. Value: <code>csv</code>\n   * @const\n   */\n  CSV: ',',\n  /**\n   * Space-separated values. Value: <code>ssv</code>\n   * @const\n   */\n  SSV: ' ',\n  /**\n   * Tab-separated values. Value: <code>tsv</code>\n   * @const\n   */\n  TSV: '\\t',\n  /**\n   * Pipe(|)-separated values. Value: <code>pipes</code>\n   * @const\n   */\n  PIPES: '|',\n  /**\n   * Native array. Value: <code>multi</code>\n   * @const\n   */\n  MULTI: 'multi'\n};\nApiClient.instance = new ApiClient();","map":{"version":3,"names":["superagent","querystring","ApiClient","constructor","basePath","replace","authentications","defaultHeaders","timeout","cache","enableCookies","window","agent","requestAgent","paramToString","param","undefined","Date","toJSON","toString","buildUrl","path","pathParams","match","url","fullMatch","key","value","hasOwnProperty","encodeURIComponent","isJsonMime","contentType","Boolean","jsonPreferredMime","contentTypes","i","length","isFileParam","require","fs","err","ReadStream","Buffer","Blob","File","normalizeParams","params","newParams","Array","isArray","buildCollectionParam","collectionFormat","map","join","Error","applyAuthToRequest","request","authNames","forEach","authName","auth","type","username","password","apiKey","data","apiKeyPrefix","name","set","query","accessToken","deserialize","response","returnType","status","body","Object","keys","text","convertToType","callApi","httpMethod","queryParams","headerParams","formParams","bodyParam","accepts","callback","toUpperCase","getTime","header","send","stringify","_formParams","attach","field","accept","responseType","attachCookies","withCredentials","end","error","saveCookies","parseDate","str","parseInt","parseFloat","String","constructFromObject","itemType","item","keyType","valueType","k","result","obj","CollectionFormatEnum","CSV","SSV","TSV","PIPES","MULTI","instance"],"sources":["/Users/vedantaneogi/Desktop/COP290-Lab3/locofy/src/ApiClient.js"],"sourcesContent":["/*\n * FMD\n * A website for movies' and TV shows' reviews\n *\n * OpenAPI spec version: 3.0.0\n * Contact: om.dehlantube@gmail.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 3.0.41\n *\n * Do not edit the class manually.\n *\n */\nimport superagent from \"superagent\";\nimport querystring from \"querystring\";\n\n/**\n* @module ApiClient\n* @version 3.0.0\n*/\n\n/**\n* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n* application to use this class directly - the *Api and model classes provide the public API for the service. The\n* contents of this file should be regarded as internal but are documented for completeness.\n* @alias module:ApiClient\n* @class\n*/\nexport class ApiClient {\n    constructor() {\n        /**\n         * The base URL against which to resolve every API call's (relative) path.\n         * @type {String}\n         * @default https://virtserver.swaggerhub.com/VEDANTANEOGI_1/FMD_API3.0/3.0.0\n         */\n        this.basePath = 'http://localhost:8080/VEDANTANEOGI_1/FMD_API3.0/3.0.0'.replace(/\\/+$/, '');\n\n        /**\n         * The authentication methods to be included for all API calls.\n         * @type {Array.<String>}\n         */\n        this.authentications = {\n        }\n\n        /**\n         * The default HTTP headers to be included for all API calls.\n         * @type {Array.<String>}\n         * @default {}\n         */\n        this.defaultHeaders = {};\n\n        /**\n         * The default HTTP timeout for all API calls.\n         * @type {Number}\n         * @default 60000\n         */\n        this.timeout = 60000;\n\n        /**\n         * If set to false an additional timestamp parameter is added to all API GET calls to\n         * prevent browser caching\n         * @type {Boolean}\n         * @default true\n         */\n        this.cache = true;\n\n        /**\n         * If set to true, the client will save the cookies from each server\n         * response, and return them in the next request.\n         * @default false\n         */\n        this.enableCookies = false;\n\n        /*\n         * Used to save and return cookies in a node.js (non-browser) setting,\n         * if this.enableCookies is set to true.\n         */\n        if (typeof window === 'undefined') {\n          this.agent = new superagent.agent();\n        }\n\n        /*\n         * Allow user to override superagent agent\n         */\n         this.requestAgent = null;\n\n    }\n\n    /**\n    * Returns a string representation for an actual parameter.\n    * @param param The actual parameter.\n    * @returns {String} The string representation of <code>param</code>.\n    */\n    paramToString(param) {\n        if (param == undefined || param == null) {\n            return '';\n        }\n        if (param instanceof Date) {\n            return param.toJSON();\n        }\n\n        return param.toString();\n    }\n\n    /**\n    * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n    * NOTE: query parameters are not handled here.\n    * @param {String} path The path to append to the base URL.\n    * @param {Object} pathParams The parameter values to append.\n    * @returns {String} The encoded path with parameter values substituted.\n    */\n    buildUrl(path, pathParams) {\n        if (!path.match(/^\\//)) {\n            path = '/' + path;\n        }\n\n        var url = this.basePath + path;\n        url = url.replace(/\\{([\\w-]+)\\}/g, (fullMatch, key) => {\n            var value;\n            if (pathParams.hasOwnProperty(key)) {\n                value = this.paramToString(pathParams[key]);\n            } else {\n                value = fullMatch;\n            }\n\n            return encodeURIComponent(value);\n        });\n\n        return url;\n    }\n\n    /**\n    * Checks whether the given content type represents JSON.<br>\n    * JSON content type examples:<br>\n    * <ul>\n    * <li>application/json</li>\n    * <li>application/json; charset=UTF8</li>\n    * <li>APPLICATION/JSON</li>\n    * </ul>\n    * @param {String} contentType The MIME content type to check.\n    * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n    */\n    isJsonMime(contentType) {\n        return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n    }\n\n    /**\n    * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n    * @param {Array.<String>} contentTypes\n    * @returns {String} The chosen content type, preferring JSON.\n    */\n    jsonPreferredMime(contentTypes) {\n        for (var i = 0; i < contentTypes.length; i++) {\n            if (this.isJsonMime(contentTypes[i])) {\n                return contentTypes[i];\n            }\n        }\n\n        return contentTypes[0];\n    }\n\n    /**\n    * Checks whether the given parameter value represents file-like content.\n    * @param param The parameter to check.\n    * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n    */\n    isFileParam(param) {\n        // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n        if (typeof require === 'function') {\n            let fs;\n            try {\n                fs = require('fs');\n            } catch (err) {}\n            if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n                return true;\n            }\n        }\n\n        // Buffer in Node.js\n        if (typeof Buffer === 'function' && param instanceof Buffer) {\n            return true;\n        }\n\n        // Blob in browser\n        if (typeof Blob === 'function' && param instanceof Blob) {\n            return true;\n        }\n\n        // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n        if (typeof File === 'function' && param instanceof File) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n    * Normalizes parameter values:\n    * <ul>\n    * <li>remove nils</li>\n    * <li>keep files and arrays</li>\n    * <li>format to string with `paramToString` for other cases</li>\n    * </ul>\n    * @param {Object.<String, Object>} params The parameters as object properties.\n    * @returns {Object.<String, Object>} normalized parameters.\n    */\n    normalizeParams(params) {\n        var newParams = {};\n        for (var key in params) {\n            if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n                var value = params[key];\n                if (this.isFileParam(value) || Array.isArray(value)) {\n                    newParams[key] = value;\n                } else {\n                    newParams[key] = this.paramToString(value);\n                }\n            }\n        }\n\n        return newParams;\n    }\n\n    /**\n    * Enumeration of collection format separator strategies.\n    * @enum {String}\n    * @readonly\n    */\n    static CollectionFormatEnum = {\n        /**\n         * Comma-separated values. Value: <code>csv</code>\n         * @const\n         */\n        CSV: ',',\n\n        /**\n         * Space-separated values. Value: <code>ssv</code>\n         * @const\n         */\n        SSV: ' ',\n\n        /**\n         * Tab-separated values. Value: <code>tsv</code>\n         * @const\n         */\n        TSV: '\\t',\n\n        /**\n         * Pipe(|)-separated values. Value: <code>pipes</code>\n         * @const\n         */\n        PIPES: '|',\n\n        /**\n         * Native array. Value: <code>multi</code>\n         * @const\n         */\n        MULTI: 'multi'\n    };\n\n    /**\n    * Builds a string representation of an array-type actual parameter, according to the given collection format.\n    * @param {Array} param An array parameter.\n    * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n    * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n    * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n    */\n    buildCollectionParam(param, collectionFormat) {\n        if (param == null) {\n            return null;\n        }\n        switch (collectionFormat) {\n            case 'csv':\n                return param.map(this.paramToString).join(',');\n            case 'ssv':\n                return param.map(this.paramToString).join(' ');\n            case 'tsv':\n                return param.map(this.paramToString).join('\\t');\n            case 'pipes':\n                return param.map(this.paramToString).join('|');\n            case 'multi':\n                //return the array directly as SuperAgent will handle it as expected\n                return param.map(this.paramToString);\n            default:\n                throw new Error('Unknown collection format: ' + collectionFormat);\n        }\n    }\n\n    /**\n    * Applies authentication headers to the request.\n    * @param {Object} request The request object created by a <code>superagent()</code> call.\n    * @param {Array.<String>} authNames An array of authentication method names.\n    */\n    applyAuthToRequest(request, authNames) {\n        authNames.forEach((authName) => {\n            var auth = this.authentications[authName];\n            switch (auth.type) {\n                case 'basic':\n                    if (auth.username || auth.password) {\n                        request.auth(auth.username || '', auth.password || '');\n                    }\n\n                    break;\n                case 'apiKey':\n                    if (auth.apiKey) {\n                        var data = {};\n                        if (auth.apiKeyPrefix) {\n                            data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n                        } else {\n                            data[auth.name] = auth.apiKey;\n                        }\n\n                        if (auth['in'] === 'header') {\n                            request.set(data);\n                        } else {\n                            request.query(data);\n                        }\n                    }\n\n                    break;\n                case 'oauth2':\n                    if (auth.accessToken) {\n                        request.set({'Authorization': 'Bearer ' + auth.accessToken});\n                    }\n\n                    break;\n                default:\n                    throw new Error('Unknown authentication type: ' + auth.type);\n            }\n        });\n    }\n\n    /**\n    * Deserializes an HTTP response body into a value of the specified type.\n    * @param {Object} response A SuperAgent response object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns A value of the specified type.\n    */\n    deserialize(response, returnType) {\n        if (response == null || returnType == null || response.status == 204) {\n            return null;\n        }\n\n        // Rely on SuperAgent for parsing response body.\n        // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n        var data = response.body;\n        if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n            // SuperAgent does not always produce a body; use the unparsed response as a fallback\n            data = response.text;\n        }\n\n        return ApiClient.convertToType(data, returnType);\n    }\n\n    /**\n    * Callback function to receive the result of the operation.\n    * @callback module:ApiClient~callApiCallback\n    * @param {String} error Error message, if any.\n    * @param data The data returned by the service call.\n    * @param {String} response The complete HTTP response.\n    */\n\n    /**\n    * Invokes the REST service using the supplied settings and parameters.\n    * @param {String} path The base URL to invoke.\n    * @param {String} httpMethod The HTTP method to use.\n    * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n    * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n    * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n    * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n    * @param {Object} bodyParam The value to pass as the request body.\n    * @param {Array.<String>} authNames An array of authentication type names.\n    * @param {Array.<String>} contentTypes An array of request MIME types.\n    * @param {Array.<String>} accepts An array of acceptable response MIME types.\n    * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n    * constructor for a complex type.\n    * @param {module:ApiClient~callApiCallback} callback The callback function.\n    * @returns {Object} The SuperAgent request object.\n    */\n    callApi(path, httpMethod, pathParams,\n        queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n        returnType, callback) {\n\n        var url = this.buildUrl(path, pathParams);\n        var request = superagent(httpMethod, url);\n\n        // apply authentications\n        this.applyAuthToRequest(request, authNames);\n\n        // set query parameters\n        if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n            queryParams['_'] = new Date().getTime();\n        }\n\n        request.query(this.normalizeParams(queryParams));\n\n        // set header parameters\n        request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n        // set requestAgent if it is set by user\n        if (this.requestAgent) {\n          request.agent(this.requestAgent);\n        }\n\n        // set request timeout\n        request.timeout(this.timeout);\n\n        var contentType = this.jsonPreferredMime(contentTypes);\n        if (contentType) {\n            // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n            if(contentType != 'multipart/form-data') {\n                request.type(contentType);\n            }\n        } else if (!request.header['Content-Type']) {\n            request.type('application/json');\n        }\n\n        if (contentType === 'application/x-www-form-urlencoded') {\n            request.send(querystring.stringify(this.normalizeParams(formParams)));\n        } else if (contentType == 'multipart/form-data') {\n            var _formParams = this.normalizeParams(formParams);\n            for (var key in _formParams) {\n                if (_formParams.hasOwnProperty(key)) {\n                    if (this.isFileParam(_formParams[key])) {\n                        // file field\n                        request.attach(key, _formParams[key]);\n                    } else {\n                        request.field(key, _formParams[key]);\n                    }\n                }\n            }\n        } else if (bodyParam) {\n            request.send(bodyParam);\n        }\n\n        var accept = this.jsonPreferredMime(accepts);\n        if (accept) {\n            request.accept(accept);\n        }\n\n        if (returnType === 'Blob') {\n          request.responseType('blob');\n        } else if (returnType === 'String') {\n          request.responseType('string');\n        }\n\n        // Attach previously saved cookies, if enabled\n        if (this.enableCookies){\n            if (typeof window === 'undefined') {\n                this.agent.attachCookies(request);\n            }\n            else {\n                request.withCredentials();\n            }\n        }\n\n        \n\n        request.end((error, response) => {\n            if (callback) {\n                var data = null;\n                if (!error) {\n                    try {\n                        data = this.deserialize(response, returnType);\n                        if (this.enableCookies && typeof window === 'undefined'){\n                            this.agent.saveCookies(response);\n                        }\n                    } catch (err) {\n                        error = err;\n                    }\n                }\n\n                callback(error, data, response);\n            }\n        });\n\n        return request;\n    }\n\n    /**\n    * Parses an ISO-8601 string representation of a date value.\n    * @param {String} str The date value as a string.\n    * @returns {Date} The parsed date object.\n    */\n    static parseDate(str) {\n        return new Date(str);\n    }\n\n    /**\n    * Converts a value to the specified type.\n    * @param {(String|Object)} data The data to convert, as a string or object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns An instance of the specified type or null or undefined if data is null or undefined.\n    */\n    static convertToType(data, type) {\n        if (data === null || data === undefined)\n            return data\n\n        switch (type) {\n            case 'Boolean':\n                return Boolean(data);\n            case 'Integer':\n                return parseInt(data, 10);\n            case 'Number':\n                return parseFloat(data);\n            case 'String':\n                return String(data);\n            case 'Date':\n                return ApiClient.parseDate(String(data));\n            case 'Blob':\n                return data;\n            default:\n                if (type === Object) {\n                    // generic object, return directly\n                    return data;\n                } else if (typeof type === 'function') {\n                    // for model type like: User\n                    return type.constructFromObject(data);\n                } else if (Array.isArray(type)) {\n                    // for array type like: ['String']\n                    var itemType = type[0];\n\n                    return data.map((item) => {\n                        return ApiClient.convertToType(item, itemType);\n                    });\n                } else if (typeof type === 'object') {\n                    // for plain object type like: {'String': 'Integer'}\n                    var keyType, valueType;\n                    for (var k in type) {\n                        if (type.hasOwnProperty(k)) {\n                            keyType = k;\n                            valueType = type[k];\n                            break;\n                        }\n                    }\n\n                    var result = {};\n                    for (var k in data) {\n                        if (data.hasOwnProperty(k)) {\n                            var key = ApiClient.convertToType(k, keyType);\n                            var value = ApiClient.convertToType(data[k], valueType);\n                            result[key] = value;\n                        }\n                    }\n\n                    return result;\n                } else {\n                    // for unknown type, return the data directly\n                    return data;\n                }\n        }\n    }\n\n    /**\n    * Constructs a new map or array model from REST data.\n    * @param data {Object|Array} The REST data.\n    * @param obj {Object|Array} The target object or array.\n    */\n    static constructFromObject(data, obj, itemType) {\n        if (Array.isArray(data)) {\n            for (var i = 0; i < data.length; i++) {\n                if (data.hasOwnProperty(i))\n                    obj[i] = ApiClient.convertToType(data[i], itemType);\n            }\n        } else {\n            for (var k in data) {\n                if (data.hasOwnProperty(k))\n                    obj[k] = ApiClient.convertToType(data[k], itemType);\n            }\n        }\n    };\n}\n\n/**\n* The default API client implementation.\n* @type {module:ApiClient}\n*/\nApiClient.instance = new ApiClient();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}