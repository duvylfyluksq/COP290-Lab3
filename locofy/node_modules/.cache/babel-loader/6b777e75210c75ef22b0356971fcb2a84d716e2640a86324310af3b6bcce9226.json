{"ast":null,"code":"/*\n * FMD\n * A website for movies' and TV shows' reviews\n *\n * OpenAPI spec version: 3.0.0\n * Contact: om.dehlantube@gmail.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 3.0.41\n *\n * Do not edit the class manually.\n *\n */\nimport { ApiClient } from \"../ApiClient\";\nimport { Title } from '../model/Title';\nimport { User } from '../model/User';\n\n/**\n* User service.\n* @module api/UserApi\n* @version 3.0.0\n*/\nexport class UserApi {\n  /**\n  * Constructs a new UserApi. \n  * @alias module:api/UserApi\n  * @class\n  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n  * default to {@link module:ApiClient#instanc\n  e} if unspecified.\n  */\n  constructor(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n  }\n\n  /**\n   * Callback function to receive the result of the profileUserIdBioPut operation.\n   * @callback moduleapi/UserApi~profileUserIdBioPutCallback\n   * @param {String} error Error message, if any.\n   * @param data This operation does not return a value.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Update user bio\n   * @param {Number} userId ID of the user\n   * @param {String} bio New bio\n   * @param {module:api/UserApi~profileUserIdBioPutCallback} callback The callback function, accepting three arguments: error, data, response\n   */\n  profileUserIdBioPut(userId, bio, callback) {\n    let postBody = null;\n    // verify the required parameter 'userId' is set\n    if (userId === undefined || userId === null) {\n      throw new Error(\"Missing the required parameter 'userId' when calling profileUserIdBioPut\");\n    }\n    // verify the required parameter 'bio' is set\n    if (bio === undefined || bio === null) {\n      throw new Error(\"Missing the required parameter 'bio' when calling profileUserIdBioPut\");\n    }\n    let pathParams = {\n      'user_id': userId\n    };\n    let queryParams = {\n      'bio': bio\n    };\n    let headerParams = {};\n    let formParams = {};\n    let authNames = [];\n    let contentTypes = [];\n    let accepts = [];\n    let returnType = null;\n    return this.apiClient.callApi('/profile/{user_id}/bio', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);\n  }\n  /**\n   * Callback function to receive the result of the profileUserIdInterestsPut operation.\n   * @callback moduleapi/UserApi~profileUserIdInterestsPutCallback\n   * @param {String} error Error message, if any.\n   * @param data This operation does not return a value.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Update interests\n   * @param {Number} userId ID of the user\n   * @param {Array.<String>} interests New Profile Picture\n   * @param {module:api/UserApi~profileUserIdInterestsPutCallback} callback The callback function, accepting three arguments: error, data, response\n   */\n  profileUserIdInterestsPut(userId, interests, callback) {\n    let postBody = null;\n    // verify the required parameter 'userId' is set\n    if (userId === undefined || userId === null) {\n      throw new Error(\"Missing the required parameter 'userId' when calling profileUserIdInterestsPut\");\n    }\n    // verify the required parameter 'interests' is set\n    if (interests === undefined || interests === null) {\n      throw new Error(\"Missing the required parameter 'interests' when calling profileUserIdInterestsPut\");\n    }\n    let pathParams = {\n      'user_id': userId\n    };\n    let queryParams = {\n      'interests': this.apiClient.buildCollectionParam(interests, 'multi')\n    };\n    let headerParams = {};\n    let formParams = {};\n    let authNames = [];\n    let contentTypes = [];\n    let accepts = [];\n    let returnType = null;\n    return this.apiClient.callApi('/profile/{user_id}/interests', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);\n  }\n  /**\n   * Callback function to receive the result of the profileUserIdPasswordPut operation.\n   * @callback moduleapi/UserApi~profileUserIdPasswordPutCallback\n   * @param {String} error Error message, if any.\n   * @param data This operation does not return a value.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Update Password\n   * @param {Number} userId ID of the user\n   * @param {String} password New password\n   * @param {module:api/UserApi~profileUserIdPasswordPutCallback} callback The callback function, accepting three arguments: error, data, response\n   */\n  profileUserIdPasswordPut(userId, password, callback) {\n    let postBody = null;\n    // verify the required parameter 'userId' is set\n    if (userId === undefined || userId === null) {\n      throw new Error(\"Missing the required parameter 'userId' when calling profileUserIdPasswordPut\");\n    }\n    // verify the required parameter 'password' is set\n    if (password === undefined || password === null) {\n      throw new Error(\"Missing the required parameter 'password' when calling profileUserIdPasswordPut\");\n    }\n    let pathParams = {\n      'user_id': userId\n    };\n    let queryParams = {\n      'password': password\n    };\n    let headerParams = {};\n    let formParams = {};\n    let authNames = [];\n    let contentTypes = [];\n    let accepts = [];\n    let returnType = null;\n    return this.apiClient.callApi('/profile/{user_id}/password', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);\n  }\n  /**\n   * Callback function to receive the result of the profileUserIdPfpPut operation.\n   * @callback moduleapi/UserApi~profileUserIdPfpPutCallback\n   * @param {String} error Error message, if any.\n   * @param data This operation does not return a value.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Update profile picture\n   * @param {Number} userId ID of the user\n   * @param {String} pfp New Profile Picture\n   * @param {module:api/UserApi~profileUserIdPfpPutCallback} callback The callback function, accepting three arguments: error, data, response\n   */\n  profileUserIdPfpPut(userId, pfp, callback) {\n    let postBody = null;\n    // verify the required parameter 'userId' is set\n    if (userId === undefined || userId === null) {\n      throw new Error(\"Missing the required parameter 'userId' when calling profileUserIdPfpPut\");\n    }\n    // verify the required parameter 'pfp' is set\n    if (pfp === undefined || pfp === null) {\n      throw new Error(\"Missing the required parameter 'pfp' when calling profileUserIdPfpPut\");\n    }\n    let pathParams = {\n      'user_id': userId\n    };\n    let queryParams = {\n      'pfp': pfp\n    };\n    let headerParams = {};\n    let formParams = {};\n    let authNames = [];\n    let contentTypes = [];\n    let accepts = [];\n    let returnType = null;\n    return this.apiClient.callApi('/profile/{user_id}/pfp', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);\n  }\n  /**\n   * Callback function to receive the result of the profileUserIdUsernamePut operation.\n   * @callback moduleapi/UserApi~profileUserIdUsernamePutCallback\n   * @param {String} error Error message, if any.\n   * @param data This operation does not return a value.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Update username\n   * @param {Number} userId ID of the user\n   * @param {String} username New username\n   * @param {module:api/UserApi~profileUserIdUsernamePutCallback} callback The callback function, accepting three arguments: error, data, response\n   */\n  profileUserIdUsernamePut(userId, username, callback) {\n    let postBody = null;\n    // verify the required parameter 'userId' is set\n    if (userId === undefined || userId === null) {\n      throw new Error(\"Missing the required parameter 'userId' when calling profileUserIdUsernamePut\");\n    }\n    // verify the required parameter 'username' is set\n    if (username === undefined || username === null) {\n      throw new Error(\"Missing the required parameter 'username' when calling profileUserIdUsernamePut\");\n    }\n    let pathParams = {\n      'user_id': userId\n    };\n    let queryParams = {\n      'username': username\n    };\n    let headerParams = {};\n    let formParams = {};\n    let authNames = [];\n    let contentTypes = [];\n    let accepts = [];\n    let returnType = null;\n    return this.apiClient.callApi('/profile/{user_id}/username', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);\n  }\n  /**\n   * Callback function to receive the result of the userSigninPost operation.\n   * @callback moduleapi/UserApi~userSigninPostCallback\n   * @param {String} error Error message, if any.\n   * @param {module:model/User{ data The data returned by the service call.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Sign in user with credentials\n   * @param {String} username Username\n   * @param {String} password Password\n   * @param {module:api/UserApi~userSigninPostCallback} callback The callback function, accepting three arguments: error, data, response\n   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n   */\n  userSigninPost(username, password, callback) {\n    let postBody = null;\n    // verify the required parameter 'username' is set\n    if (username === undefined || username === null) {\n      throw new Error(\"Missing the required parameter 'username' when calling userSigninPost\");\n    }\n    // verify the required parameter 'password' is set\n    if (password === undefined || password === null) {\n      throw new Error(\"Missing the required parameter 'password' when calling userSigninPost\");\n    }\n    let pathParams = {};\n    let queryParams = {\n      'Username': username,\n      'Password': password\n    };\n    let headerParams = {};\n    let formParams = {};\n    let authNames = [];\n    let contentTypes = [];\n    let accepts = ['application/json'];\n    let returnType = User;\n    return this.apiClient.callApi('/user/signin', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);\n  }\n  /**\n   * Callback function to receive the result of the userSignupPost operation.\n   * @callback moduleapi/UserApi~userSignupPostCallback\n   * @param {String} error Error message, if any.\n   * @param {module:model/User{ data The data returned by the service call.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Create a new user account\n   * @param {String} username Username\n   * @param {String} password Password\n   * @param {String} confirmPassword Confirm Password\n   * @param {Array.<String>} interests Favourite Genres\n   * @param {String} pfp profile picture\n   * @param {String} bio about user\n   * @param {module:api/UserApi~userSignupPostCallback} callback The callback function, accepting three arguments: error, data, response\n   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n   */\n  userSignupPost(username, password, confirmPassword, interests, pfp, bio, callback) {\n    let postBody = null;\n    // verify the required parameter 'username' is set\n    if (username === undefined || username === null) {\n      throw new Error(\"Missing the required parameter 'username' when calling userSignupPost\");\n    }\n    // verify the required parameter 'password' is set\n    if (password === undefined || password === null) {\n      throw new Error(\"Missing the required parameter 'password' when calling userSignupPost\");\n    }\n    // verify the required parameter 'confirmPassword' is set\n    if (confirmPassword === undefined || confirmPassword === null) {\n      throw new Error(\"Missing the required parameter 'confirmPassword' when calling userSignupPost\");\n    }\n    // verify the required parameter 'interests' is set\n    if (interests === undefined || interests === null) {\n      throw new Error(\"Missing the required parameter 'interests' when calling userSignupPost\");\n    }\n    // verify the required parameter 'pfp' is set\n    if (pfp === undefined || pfp === null) {\n      throw new Error(\"Missing the required parameter 'pfp' when calling userSignupPost\");\n    }\n    // verify the required parameter 'bio' is set\n    if (bio === undefined || bio === null) {\n      throw new Error(\"Missing the required parameter 'bio' when calling userSignupPost\");\n    }\n    let pathParams = {};\n    let queryParams = {\n      'Username': username,\n      'Password': password,\n      'Confirm_Password': confirmPassword,\n      'interests': this.apiClient.buildCollectionParam(interests, 'multi'),\n      'pfp': pfp,\n      'bio': bio\n    };\n    let headerParams = {};\n    let formParams = {};\n    let authNames = [];\n    let contentTypes = [];\n    let accepts = ['application/json'];\n    let returnType = User;\n    return this.apiClient.callApi('/user/signup', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);\n  }\n  /**\n   * Callback function to receive the result of the userUserIdGet operation.\n   * @callback moduleapi/UserApi~userUserIdGetCallback\n   * @param {String} error Error message, if any.\n   * @param {module:model/User{ data The data returned by the service call.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Get User object(user details) from user id\n   * @param {Number} userId UserId\n   * @param {module:api/UserApi~userUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response\n   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n   */\n  userUserIdGet(userId, callback) {\n    let postBody = null;\n    // verify the required parameter 'userId' is set\n    if (userId === undefined || userId === null) {\n      throw new Error(\"Missing the required parameter 'userId' when calling userUserIdGet\");\n    }\n    let pathParams = {\n      'user_id': userId\n    };\n    let queryParams = {};\n    let headerParams = {};\n    let formParams = {};\n    let authNames = [];\n    let contentTypes = [];\n    let accepts = ['application/json'];\n    let returnType = User;\n    return this.apiClient.callApi('/user/{user_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);\n  }\n  /**\n   * Callback function to receive the result of the watchlistUserIdGet operation.\n   * @callback moduleapi/UserApi~watchlistUserIdGetCallback\n   * @param {String} error Error message, if any.\n   * @param {Array.<module:model/Title>{ data The data returned by the service call.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Get all titles in user watchlist\n   * @param {Number} userId ID of the user\n   * @param {module:api/UserApi~watchlistUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response\n   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n   */\n  watchlistUserIdGet(userId, callback) {\n    let postBody = null;\n    // verify the required parameter 'userId' is set\n    if (userId === undefined || userId === null) {\n      throw new Error(\"Missing the required parameter 'userId' when calling watchlistUserIdGet\");\n    }\n    let pathParams = {\n      'user_id': userId\n    };\n    let queryParams = {};\n    let headerParams = {};\n    let formParams = {};\n    let authNames = [];\n    let contentTypes = [];\n    let accepts = ['application/json'];\n    let returnType = [Title];\n    return this.apiClient.callApi('/watchlist/{user_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);\n  }\n  /**\n   * Callback function to receive the result of the watchlistUserIdPut operation.\n   * @callback moduleapi/UserApi~watchlistUserIdPutCallback\n   * @param {String} error Error message, if any.\n   * @param data This operation does not return a value.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Add/Remove title from watchlist\n   * @param {Number} userId ID of the user\n   * @param {String} id id of TVShow/Movie to be added to the watchlist\n   * @param {module:api/UserApi~watchlistUserIdPutCallback} callback The callback function, accepting three arguments: error, data, response\n   */\n  watchlistUserIdPut(userId, id, callback) {\n    let postBody = null;\n    // verify the required parameter 'userId' is set\n    if (userId === undefined || userId === null) {\n      throw new Error(\"Missing the required parameter 'userId' when calling watchlistUserIdPut\");\n    }\n    // verify the required parameter 'id' is set\n    if (id === undefined || id === null) {\n      throw new Error(\"Missing the required parameter 'id' when calling watchlistUserIdPut\");\n    }\n    let pathParams = {\n      'user_id': userId\n    };\n    let queryParams = {\n      'id': id\n    };\n    let headerParams = {};\n    let formParams = {};\n    let authNames = [];\n    let contentTypes = [];\n    let accepts = [];\n    let returnType = null;\n    return this.apiClient.callApi('/watchlist/{user_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);\n  }\n  /**\n   * Callback function to receive the result of the watchlistUserIdRemovePut operation.\n   * @callback moduleapi/UserApi~watchlistUserIdRemovePutCallback\n   * @param {String} error Error message, if any.\n   * @param data This operation does not return a value.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Remove title from user&#x27;s watchlist\n   * @param {Number} userId ID of the user\n   * @param {String} id id of the Title to be removed from user&#x27;s watchlist\n   * @param {module:api/UserApi~watchlistUserIdRemovePutCallback} callback The callback function, accepting three arguments: error, data, response\n   */\n  watchlistUserIdRemovePut(userId, id, callback) {\n    let postBody = null;\n    // verify the required parameter 'userId' is set\n    if (userId === undefined || userId === null) {\n      throw new Error(\"Missing the required parameter 'userId' when calling watchlistUserIdRemovePut\");\n    }\n    // verify the required parameter 'id' is set\n    if (id === undefined || id === null) {\n      throw new Error(\"Missing the required parameter 'id' when calling watchlistUserIdRemovePut\");\n    }\n    let pathParams = {\n      'user_id': userId\n    };\n    let queryParams = {\n      'id': id\n    };\n    let headerParams = {};\n    let formParams = {};\n    let authNames = [];\n    let contentTypes = [];\n    let accepts = [];\n    let returnType = null;\n    return this.apiClient.callApi('/watchlist/{user_id}/remove', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);\n  }\n}","map":{"version":3,"names":["ApiClient","Title","User","UserApi","constructor","apiClient","instance","profileUserIdBioPut","userId","bio","callback","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","profileUserIdInterestsPut","interests","buildCollectionParam","profileUserIdPasswordPut","password","profileUserIdPfpPut","pfp","profileUserIdUsernamePut","username","userSigninPost","userSignupPost","confirmPassword","userUserIdGet","watchlistUserIdGet","watchlistUserIdPut","id","watchlistUserIdRemovePut"],"sources":["/Users/vedantaneogi/Desktop/COP290-Lab3/locofy/src/api/UserApi.js"],"sourcesContent":["/*\n * FMD\n * A website for movies' and TV shows' reviews\n *\n * OpenAPI spec version: 3.0.0\n * Contact: om.dehlantube@gmail.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 3.0.41\n *\n * Do not edit the class manually.\n *\n */\nimport {ApiClient} from \"../ApiClient\";\nimport {Title} from '../model/Title';\nimport {User} from '../model/User';\n\n/**\n* User service.\n* @module api/UserApi\n* @version 3.0.0\n*/\nexport class UserApi {\n\n    /**\n    * Constructs a new UserApi. \n    * @alias module:api/UserApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instanc\n    e} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n    /**\n     * Callback function to receive the result of the profileUserIdBioPut operation.\n     * @callback moduleapi/UserApi~profileUserIdBioPutCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Update user bio\n     * @param {Number} userId ID of the user\n     * @param {String} bio New bio\n     * @param {module:api/UserApi~profileUserIdBioPutCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    profileUserIdBioPut(userId, bio, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'userId' is set\n      if (userId === undefined || userId === null) {\n        throw new Error(\"Missing the required parameter 'userId' when calling profileUserIdBioPut\");\n      }\n      // verify the required parameter 'bio' is set\n      if (bio === undefined || bio === null) {\n        throw new Error(\"Missing the required parameter 'bio' when calling profileUserIdBioPut\");\n      }\n\n      let pathParams = {\n        'user_id': userId\n      };\n      let queryParams = {\n        'bio': bio\n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = [];\n      let returnType = null;\n\n      return this.apiClient.callApi(\n        '/profile/{user_id}/bio', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n    /**\n     * Callback function to receive the result of the profileUserIdInterestsPut operation.\n     * @callback moduleapi/UserApi~profileUserIdInterestsPutCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Update interests\n     * @param {Number} userId ID of the user\n     * @param {Array.<String>} interests New Profile Picture\n     * @param {module:api/UserApi~profileUserIdInterestsPutCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    profileUserIdInterestsPut(userId, interests, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'userId' is set\n      if (userId === undefined || userId === null) {\n        throw new Error(\"Missing the required parameter 'userId' when calling profileUserIdInterestsPut\");\n      }\n      // verify the required parameter 'interests' is set\n      if (interests === undefined || interests === null) {\n        throw new Error(\"Missing the required parameter 'interests' when calling profileUserIdInterestsPut\");\n      }\n\n      let pathParams = {\n        'user_id': userId\n      };\n      let queryParams = {\n        'interests': this.apiClient.buildCollectionParam(interests, 'multi')\n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = [];\n      let returnType = null;\n\n      return this.apiClient.callApi(\n        '/profile/{user_id}/interests', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n    /**\n     * Callback function to receive the result of the profileUserIdPasswordPut operation.\n     * @callback moduleapi/UserApi~profileUserIdPasswordPutCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Update Password\n     * @param {Number} userId ID of the user\n     * @param {String} password New password\n     * @param {module:api/UserApi~profileUserIdPasswordPutCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    profileUserIdPasswordPut(userId, password, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'userId' is set\n      if (userId === undefined || userId === null) {\n        throw new Error(\"Missing the required parameter 'userId' when calling profileUserIdPasswordPut\");\n      }\n      // verify the required parameter 'password' is set\n      if (password === undefined || password === null) {\n        throw new Error(\"Missing the required parameter 'password' when calling profileUserIdPasswordPut\");\n      }\n\n      let pathParams = {\n        'user_id': userId\n      };\n      let queryParams = {\n        'password': password\n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = [];\n      let returnType = null;\n\n      return this.apiClient.callApi(\n        '/profile/{user_id}/password', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n    /**\n     * Callback function to receive the result of the profileUserIdPfpPut operation.\n     * @callback moduleapi/UserApi~profileUserIdPfpPutCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Update profile picture\n     * @param {Number} userId ID of the user\n     * @param {String} pfp New Profile Picture\n     * @param {module:api/UserApi~profileUserIdPfpPutCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    profileUserIdPfpPut(userId, pfp, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'userId' is set\n      if (userId === undefined || userId === null) {\n        throw new Error(\"Missing the required parameter 'userId' when calling profileUserIdPfpPut\");\n      }\n      // verify the required parameter 'pfp' is set\n      if (pfp === undefined || pfp === null) {\n        throw new Error(\"Missing the required parameter 'pfp' when calling profileUserIdPfpPut\");\n      }\n\n      let pathParams = {\n        'user_id': userId\n      };\n      let queryParams = {\n        'pfp': pfp\n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = [];\n      let returnType = null;\n\n      return this.apiClient.callApi(\n        '/profile/{user_id}/pfp', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n    /**\n     * Callback function to receive the result of the profileUserIdUsernamePut operation.\n     * @callback moduleapi/UserApi~profileUserIdUsernamePutCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Update username\n     * @param {Number} userId ID of the user\n     * @param {String} username New username\n     * @param {module:api/UserApi~profileUserIdUsernamePutCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    profileUserIdUsernamePut(userId, username, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'userId' is set\n      if (userId === undefined || userId === null) {\n        throw new Error(\"Missing the required parameter 'userId' when calling profileUserIdUsernamePut\");\n      }\n      // verify the required parameter 'username' is set\n      if (username === undefined || username === null) {\n        throw new Error(\"Missing the required parameter 'username' when calling profileUserIdUsernamePut\");\n      }\n\n      let pathParams = {\n        'user_id': userId\n      };\n      let queryParams = {\n        'username': username\n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = [];\n      let returnType = null;\n\n      return this.apiClient.callApi(\n        '/profile/{user_id}/username', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n    /**\n     * Callback function to receive the result of the userSigninPost operation.\n     * @callback moduleapi/UserApi~userSigninPostCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/User{ data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Sign in user with credentials\n     * @param {String} username Username\n     * @param {String} password Password\n     * @param {module:api/UserApi~userSigninPostCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    userSigninPost(username, password, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'username' is set\n      if (username === undefined || username === null) {\n        throw new Error(\"Missing the required parameter 'username' when calling userSigninPost\");\n      }\n      // verify the required parameter 'password' is set\n      if (password === undefined || password === null) {\n        throw new Error(\"Missing the required parameter 'password' when calling userSigninPost\");\n      }\n\n      let pathParams = {\n        \n      };\n      let queryParams = {\n        'Username': username,'Password': password\n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = User;\n\n      return this.apiClient.callApi(\n        '/user/signin', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n    /**\n     * Callback function to receive the result of the userSignupPost operation.\n     * @callback moduleapi/UserApi~userSignupPostCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/User{ data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Create a new user account\n     * @param {String} username Username\n     * @param {String} password Password\n     * @param {String} confirmPassword Confirm Password\n     * @param {Array.<String>} interests Favourite Genres\n     * @param {String} pfp profile picture\n     * @param {String} bio about user\n     * @param {module:api/UserApi~userSignupPostCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    userSignupPost(username, password, confirmPassword, interests, pfp, bio, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'username' is set\n      if (username === undefined || username === null) {\n        throw new Error(\"Missing the required parameter 'username' when calling userSignupPost\");\n      }\n      // verify the required parameter 'password' is set\n      if (password === undefined || password === null) {\n        throw new Error(\"Missing the required parameter 'password' when calling userSignupPost\");\n      }\n      // verify the required parameter 'confirmPassword' is set\n      if (confirmPassword === undefined || confirmPassword === null) {\n        throw new Error(\"Missing the required parameter 'confirmPassword' when calling userSignupPost\");\n      }\n      // verify the required parameter 'interests' is set\n      if (interests === undefined || interests === null) {\n        throw new Error(\"Missing the required parameter 'interests' when calling userSignupPost\");\n      }\n      // verify the required parameter 'pfp' is set\n      if (pfp === undefined || pfp === null) {\n        throw new Error(\"Missing the required parameter 'pfp' when calling userSignupPost\");\n      }\n      // verify the required parameter 'bio' is set\n      if (bio === undefined || bio === null) {\n        throw new Error(\"Missing the required parameter 'bio' when calling userSignupPost\");\n      }\n\n      let pathParams = {\n        \n      };\n      let queryParams = {\n        'Username': username,'Password': password,'Confirm_Password': confirmPassword,'interests': this.apiClient.buildCollectionParam(interests, 'multi'),'pfp': pfp,'bio': bio\n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = User;\n\n      return this.apiClient.callApi(\n        '/user/signup', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n    /**\n     * Callback function to receive the result of the userUserIdGet operation.\n     * @callback moduleapi/UserApi~userUserIdGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/User{ data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get User object(user details) from user id\n     * @param {Number} userId UserId\n     * @param {module:api/UserApi~userUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    userUserIdGet(userId, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'userId' is set\n      if (userId === undefined || userId === null) {\n        throw new Error(\"Missing the required parameter 'userId' when calling userUserIdGet\");\n      }\n\n      let pathParams = {\n        'user_id': userId\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = User;\n\n      return this.apiClient.callApi(\n        '/user/{user_id}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n    /**\n     * Callback function to receive the result of the watchlistUserIdGet operation.\n     * @callback moduleapi/UserApi~watchlistUserIdGetCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/Title>{ data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get all titles in user watchlist\n     * @param {Number} userId ID of the user\n     * @param {module:api/UserApi~watchlistUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    watchlistUserIdGet(userId, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'userId' is set\n      if (userId === undefined || userId === null) {\n        throw new Error(\"Missing the required parameter 'userId' when calling watchlistUserIdGet\");\n      }\n\n      let pathParams = {\n        'user_id': userId\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [Title];\n\n      return this.apiClient.callApi(\n        '/watchlist/{user_id}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n    /**\n     * Callback function to receive the result of the watchlistUserIdPut operation.\n     * @callback moduleapi/UserApi~watchlistUserIdPutCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Add/Remove title from watchlist\n     * @param {Number} userId ID of the user\n     * @param {String} id id of TVShow/Movie to be added to the watchlist\n     * @param {module:api/UserApi~watchlistUserIdPutCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    watchlistUserIdPut(userId, id, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'userId' is set\n      if (userId === undefined || userId === null) {\n        throw new Error(\"Missing the required parameter 'userId' when calling watchlistUserIdPut\");\n      }\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling watchlistUserIdPut\");\n      }\n\n      let pathParams = {\n        'user_id': userId\n      };\n      let queryParams = {\n        'id': id\n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = [];\n      let returnType = null;\n\n      return this.apiClient.callApi(\n        '/watchlist/{user_id}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n    /**\n     * Callback function to receive the result of the watchlistUserIdRemovePut operation.\n     * @callback moduleapi/UserApi~watchlistUserIdRemovePutCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Remove title from user&#x27;s watchlist\n     * @param {Number} userId ID of the user\n     * @param {String} id id of the Title to be removed from user&#x27;s watchlist\n     * @param {module:api/UserApi~watchlistUserIdRemovePutCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    watchlistUserIdRemovePut(userId, id, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'userId' is set\n      if (userId === undefined || userId === null) {\n        throw new Error(\"Missing the required parameter 'userId' when calling watchlistUserIdRemovePut\");\n      }\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling watchlistUserIdRemovePut\");\n      }\n\n      let pathParams = {\n        'user_id': userId\n      };\n      let queryParams = {\n        'id': id\n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = [];\n      let returnType = null;\n\n      return this.apiClient.callApi(\n        '/watchlist/{user_id}/remove', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}