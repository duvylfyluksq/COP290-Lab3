---
openapi: 3.0.3
info:
  title: FMD
  description: A website for movies' and TV shows' reviews
  termsOfService: http://swagger.io/terms/
  contact:
    email: om.dehlantube@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 3.0.0
servers:
- url: http://localhost:8080/VEDANTANEOGI_1/FMD_API3.0/3.0.0
tags:
- name: Reviews
  description: Everything about reviews
- name: Titles
  description: Everything about shows or movies
- name: User
  description: Operations about user
  
paths:
  /search:
    get:
      tags:
      - Titles
      description: Obtain all movies/shows whose prefix matches the input expression
      parameters:
      - name: expression
        in: query
        description: the expression to be searched
        required: true
        style: form
        explode: false
        schema:
          type: string
          example: the dark knight
      responses:
        "200":
          description: Successful search
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/title'
        "404":
          description: Movie/TV Show Not found
          
  /review:
    post:
      tags:
      - Reviews
      summary: Add a new review
      parameters:
      - name: movie_id
        in: query
        description: ID of the movie for which the review is being posted(null if TVShow)
        required: true
        style: form
        explode: false
        schema:
          type: string
          format: JSON
      - name: show_id
        in: query
        description: ID of the TVShow for which the review is being posted(null if Movie)
        required: true
        style: form
        explode: false
        schema:
          type: string
          format: JSON
      - name: user_id
        in: query
        description: ID of the user who is posting the review
        required: true
        style: form
        explode: false
        schema:
          type: integer
          example: 42
      - name: rating
        in: query
        description: rating by the user
        required: true
        style: form
        explode: false
        schema:
          type: integer
          maximum: 10
          minimum: 1
          example: 10
      - name: title
        in: query
        description: the review title of the review to be added
        required: true
        style: form
        explode: false
        schema:
          type: string
          maxLength: 50
          example: Amazing Watch!
      - name: content
        in: query
        description: content of the review
        required: true
        style: form
        explode: false
        schema:
          type: string
          maxLength: 500
          example: have you got colour in your cheeks? do you ever get that feel' that you can't shift the tide that sticks around like sumats in your teeth.
      - name: creation_time
        in: query
        description: creation time
        required: true
        style: form
        explode: false
        schema:
          type: string
          format: date-time
          example: '2023-04-02T12:30:45Z'
      responses:
        "200":
          description: Review added successfully
        "400":
          description: Invalid request body

  /movie:
    get:
      tags:
      - Titles
      summary: Sort/Filter movies
      parameters:
      - $ref: '#/components/parameters/genre'
      - $ref: '#/components/parameters/sort_type_browse'
      - $ref: '#/components/parameters/sort_order'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movie'
        "400":
          description: Invalid request
        "404":
          description: No movies found

  /tvshow:
    get:
      tags:
      - Titles
      summary: Sort/Filter TV Shows
      parameters:
      - $ref: '#/components/parameters/genre'
      - $ref: '#/components/parameters/sort_type_browse'
      - $ref: '#/components/parameters/sort_order'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tvshow'
        "400":
          description: Invalid request
        "404":
          description: No TV Shows found
  
  /title:
    get:
      tags:
      - Titles
      summary: Sort/Filter Movies and TV Shows
      parameters:
      - $ref: '#/components/parameters/genre'
      - $ref: '#/components/parameters/sort_type_browse'
      - $ref: '#/components/parameters/sort_order'
      responses:
        "200":
          description: List of Movies/TV Shows
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/title'
        "400":
          description: Invalid request
        "404":
          description: No titles found
  /user/{user_id}:
    get:
      tags:
      - User
      summary: Get User object(user details) from user id
      parameters:
      - name: user_id
        in: path
        description: UserId
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      responses:
        "200":
          description: User details returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "404":
          description: User not found
        "500":
          description: Internal Server Error

  /user/signin:
    post:
      tags:
      - User
      summary: Sign in user with credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  maxLength: 25
                  example: bobdylan
                password:
                  type: string
                  maxLength: 25
                  example: godofnoobs_42
              required:
                - username
                - password
      responses:
        "200":
          description: User signed in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "400":
          description: Bad request
        "401":
          description: Invalid credentials
        "500":
          description: Internal server error

  /user/signup:
    post:
      tags:
      - User
      summary: Sign Up
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  maxLength: 25
                  example: bobdylan
                password:
                  type: string
                  maxLength: 25
                  example: godofnoobs_42
                confirm_password:
                  type: string
                  maxLength: 25
                  example: godofnoobs_42
                pfp:
                  type: string
                  example: https:example.com/pic.jpeg
                bio:
                  type: string
                  example: hi im bobdylan
                interests:
                  type: array
                  items:
                    type: string
                  maxItems: 3
                  minItems: 3
              required:
                - username
                - password
                - confirm_password
                - bio
                - pfp
                - interests
      responses:
        "200":
          description: User account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "400":
          description: Bad request
        "409":
          description: User already exists
        "500":
          description: Internal server error

  /review/movie/{id}:
    get:
      tags:
      - Reviews
      summary: Get all reviews of a movie
      description: Returns a list of reviews for a particular movie
      parameters:
      - name: id
        in: path
        description: ID of the Movie
        required: true
        schema:
          type: integer
      - $ref: '#/components/parameters/sort_type_reviews'
      - $ref: '#/components/parameters/sort_order'
      responses:
        "200":
          description: List of reviews for Movie
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/review'
        "400":
          description: Invalid request
        "404":
          description: Title not found
    
  /review/tvshow/{id}:
    get:
      tags:
      - Reviews
      summary: Get all reviews of a Tvshow
      description: Returns a list of reviews for a particular Tvshow
      parameters:
      - name: id
        in: path
        description: ID of the Tvshow
        required: true
        schema:
          type: integer
      - $ref: '#/components/parameters/sort_type_reviews'
      - $ref: '#/components/parameters/sort_order'
      responses:
        "200":
          description: List of reviews for TVShow
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/review'
        "400":
          description: Invalid request
        "404":
          description: Title not found

  /review/{review_id}/comment:
    post:
      tags:
      - Reviews
      summary: Add comment to review
      parameters:
      - name: review_id
        in: path
        description: ID of the review
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 42
      - name: user_id
        in: query
        description: ID of the commentor
        required: true
        style: form
        explode: false
        schema:
          type: integer
          example: 42
      - name: content
        in: query
        description: Comment to be added to review
        required: true
        style: form
        explode: false
        schema:
          type: string
          maxLength: 200
          example: im a puppet on a string, tracy island time travelling diamond, coulda shaped heartaches
      responses:
        "201":
          description: Comment added successfully to review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
        "400":
          description: Bad request. Invalid review ID or missing required fields
        "404":
          description: Review not found
    get:
      tags:
      - Reviews
      summary: Get all comments of a review
      description: Returns a list of comments for a particular review
      parameters:
      - name: review_id
        in: path
        description: ID of the review
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 42
      responses:
        "200":
          description: List of comments for review
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment'
        "400":
          description: Invalid request
        "404":
          description: Review not found

  /review/{review_id}/likes:
    put:
      tags:
      - Reviews
      summary: Like/Unlike Review
      parameters:
      - name: review_id
        in: path
        description: ID of the review
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 42
      - name: user_id
        in: query
        description: ID of the user who likes the review
        required: true
        style: form
        explode: false
        schema:
          type: integer
          example: 42
      responses:
        "201":
          description: Like added or removed
        "400":
          description: Bad request. Invalid review ID or missing required fields
        "404":
          description: Review not found

  /movie/{id}:
    get:
      tags:
      - Titles
      summary: Get information about a Movie
      description: Returns information about a particular Movie, including its title, genre, director, actors, release date, and description.
      parameters:
      - name: id
        in: path
        description: ID of the Movie
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Information about the Movie/TV Show
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'
        "400":
          description: Invalid request
        "404":
          description: Movie not found
    
  /tvshow/{id}:
    get:
      tags:
      - Titles
      summary: Get information about a TV Show
      description: Returns information about a particular TV Show, including its title, genre, director, actors, release date, and description.
      parameters:
      - name: id
        in: path
        description: ID of the TV Show
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Information about the Movie/TV Show
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tvshow'
        "400":
          description: Invalid request
        "404":
          description: TV Show not found
    

  /review/user/{user_id}:
    get:
      tags:
      - Reviews
      summary: Get all reviews of a user
      description: Returns a list of reviews for a particular user
      parameters:
      - name: user_id
        in: path
        description: ID of the user 
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 42
      - $ref: '#/components/parameters/sort_type_reviews'
      - $ref: '#/components/parameters/sort_order'
      responses:
        "200":
          description: List of reviews by the User
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/review'
        "400":
          description: Invalid request
        "404":
          description: Title not found

  /watchlist/{user_id}:
    get:
      tags:
      - User
      summary: Get all titles in user watchlist
      parameters:
      - name: user_id
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 42
      responses:
        "200":
          description: List of titles in user watchlist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/title'
        "400":
          description: Bad request. Invalid user ID
  
  /watchlist/movie/{user_id}:
    put:
      tags:
      - User
      summary: Add/Remove movie from watchlist
      parameters:
      - name: user_id
        in: path
        description: ID of the user
        required: true
        schema:
          type: integer
          example: 42
      - name: id
        in: query
        description: ID of the movie
        required: true
        schema:
          type: integer
          example: 42
      responses:
        "201":
          description: Title added/removed successfully
        "400":
          description: Bad request. Invalid user ID or title not provided
          
  /watchlist/tvshow/{user_id}:
    put:
      tags:
      - User
      summary: Add/Remove TV show from watchlist
      parameters:
      - name: user_id
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 42
      - name: id
        in: query
        description: ID of TV show
        required: True
        schema: 
          type: integer
          example: 69
      responses:
        "201":
          description: Title added/removed successfully
        "400":
          description: Bad request. Invalid user ID or title not provided  

  /watchlist/movie/remove/{user_id}:
    put:
      tags:
      - User
      summary: Remove Movie from user's watchlist
      parameters:
      - name: user_id
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 42
      - name: id
        in: query
        description: id of the Movie to be removed from user's watchlist
        required: true
        schema:
          type: integer
          example: 42
      responses:
        "200":
          description: Movie removed successfully from user's wishlist
        "400":
          description: Bad request. Invalid user ID or missing required fields

  /watchlist/tvshow/remove/{user_id}:
    put:
      tags:
      - User
      summary: Remove TV show from user's watchlist
      parameters:
      - name: user_id
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 42
      - name: id
        in: query
        description: id of the TV show to be removed from user's watchlist
        required: true
        schema:
          type: integer
          example: 69
      responses:
        "200":
          description: TV show removed successfully from user's wishlist
        "400":
          description: Bad request. Invalid user ID or missing required fields

  /profile/stats/{user_id}:
    get:
      tags:
      - User
      summary: Get stats for a user
      parameters:
      - name: user_id
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 42
      responses:
        "200":
          description: User Stats fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  example: 42
                minItems: 3
                maxItems: 3
        "400":
          description: Bad request. Invalid user ID or missing required fields
        "404":
          description: User not found

  /profile/{user_id}/username:
    put:
      tags:
      - User
      summary: Update username
      parameters:
      - name: user_id
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  maxLength: 25
              required:
                - username
      responses:
        "200":
          description: Username updated successfully
        "400":
          description: Bad request. Invalid user ID or missing required fields
        "404":
          description: User not found

  /profile/{user_id}/pfp:
    put:
      tags:
      - User
      summary: Update profile picture
      parameters:
      - name: user_id
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pfp:
                  type: string
                  example: https://www.example.com/1.jpeg 
              required:
                - pfp
      responses:
        "200":
          description: Profile Picture updated successfully
        "400":
          description: Bad request. Invalid user ID or missing required fields
        "404":
          description: User not found

  /profile/{user_id}/password:
    put:
      tags:
      - User
      summary: Update Password
      parameters:
      - name: user_id
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  maxLength: 25
              required:
                - password
      responses:
        "200":
          description: Password updated successfully
        "400":
          description: Bad request. Invalid user ID or missing required fields
        "404":
          description: User not found

  /profile/{user_id}/interests:
    put:
      tags:
      - User
      summary: Update interests
      parameters:
      - name: user_id
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                interests:
                  type: array
                  items:
                    type: string
                    example: Adventure
                  minItems: 3
                  maxItems: 3
              required:
                - interests
      responses:
        "200":
          description: Interests updated successfully
        "400":
          description: Bad request. Invalid user ID or missing required fields
        "404":
          description: User not found

  /profile/{user_id}/bio:
    put:
      tags:
      - User
      summary: Update user bio
      parameters:
      - name: user_id
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bio:
                  type: string
                  maxLength: 200
              required:
                - bio
      responses:
        "200":
          description: Bio updated successfully
        "400":
          description: Bad request. Invalid user ID or missing required fields
        "404":
          description: User not found

components:
  parameters:
    genre:
      name: genre
      in: query
      description: Genres to be filtered by 
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    sort_type_browse:
      name: sort_type_browse
      in: query
      description: Parameter based on which titles will be sorted
      required: false
      style: form
      explode: false
      schema:
        type: string
        enum:
          - Lex
          - Pop
          - Rel
          - Rat
    sort_type_reviews:
      name: sort_type_reviews
      in: query
      description: Parameter based on which reviews will be sorted
      required: false
      style: form
      explode: false
      schema:
        type: string
        enum:
          - Likes
          - Recent
    sort_order:
      name: sort_order
      in: query
      description: sorting order
      required: false
      style: form
      explode: false
      schema:
        type: boolean
        enum:
          - true
          - false


  schemas:
    
    title:
      type: object
      properties:
        movie:
          $ref: '#/components/schemas/movie'
        tvshow:
          $ref: '#/components/schemas/tvshow'
          
    movie_id:
      type: object
      properties:
        id:
          type: integer
          example: 42

    show_id:
      type: object
      properties:
        id:
          type: integer
          example: 42

    user:
      type: object
      properties:
        user_id:
          type: integer
          example: 42
        username:
          type: string
          maxLength: 25
          example: bobdylan
        password:
          type: string
          maxLength: 25
          example: godofnoobs_42
        bio:
          type: string
          example: i am bobdylan, i work with duvylfyluksq
          maxLength: 100
        pfp:
          type: string
          format: uri
          example: https://fmd.com/pfp.jpeg
        watchlist_movies:
          type: object
          additionalProperties:
            type: boolean
          example:
            1 : True
            2 : False
            42 : True
        watchlist_shows:
          type: object
          additionalProperties:
            type: boolean
          example:
            1 : True
            2 : False
            42 : True
        interests:
          type: array
          items:
            type: string
          maxItems: 3
          minItems: 3
          example:
            - Adventure
            - Comedy
            - Thriller

    movie:
      type: object
      properties:
        movie_id:
          $ref: '#/components/schemas/movie_id'
        title:
          type: string
          example: Inception
        plot:
          type: string
          maxLength: 500
        cast:
          type: array
          items:
            type: string
          maxItems: 3
          example:
            - Leonardo Di Caprio
            - Kate Winslet
            - Bradd Pitt
        director:
          type: string
          example: Christopher Nolan
        writer:
          type: string
          example: Todd Phillips
        rating:
          type: number
          format: float
          example: 9.36
        genres:
          type: array
          items:
            type: string
          maxItems: 3
          minItems: 3
          example:
            - Adventure
            - Comedy
            - Thriller
        release_date:
          type: string
          format: date
          example: '2001-08-19'
        duration:
          type: string
          pattern: '^\d+hrs \d+mins$'
          example: 2hrs 2mins
        poster:
          type: string
          example: https://fmd.com/poster.jpeg

    tvshow:
      type: object
      properties:
        show_id:
          $ref: '#/components/schemas/show_id'
        title:
          type: string
          example: Peaky Blinders
        plot:
          type: string
          maxLength: 500
        season:
          type: integer
          example: 2
        cast:
          type: array
          items:
            type: string
          maxItems: 3
          example:
            - Leonardo Di Caprio
            - Kate Winslet
            - Bradd Pitt
        director:
          type: string
          example: Christopher Nolan
        writer:
          type: string
          example: Todd Phillips
        rating:
          type: number
          format: float
          example: 9.36
        genres:
          type: array
          items:
            type: string
          minItems: 3
          maxItems: 3
          example:
            - Adventure
            - Comedy
            - Thriller
        release_date:
          type: string
          format: date
          example: '2001-08-19'
        duration:
          type: string
          pattern: '^\d+mins$'
          example: 55mins
        poster:
          type: string
          example: https://fmd.com/poster.jpeg

    review:
      type: object
      properties:
        review_id:
          type: integer
          example: 42
        title:
          type: string
          maxLength: 50
          example: Amazing Watch!
        movie_id:
          $ref: '#/components/schemas/movie_id'
        show_id:
          $ref: '#/components/schemas/show_id'
        user_id:
          type: integer
          example: 42
        likes:
          type: object
          additionalProperties:
            type: boolean
          example:
            1 : True
            2 : False
            42 : True
        rating:
          type: integer
          maximum: 10
          minimum: 1
          example: 10
        content:
          type: string
          maxLength: 500
          example:
            have you got colour in your cheeks? do you ever get that feel' that you can't shift the tide that sticks around like sumats in your teeth.
        creation_time:
          type: string
          format: date-time
          example: '2023-04-02T12:30:45Z'

    comment:
      type: object
      properties:
        comment_id:
          type: integer
          example: 42
        review_id:
          type: integer
          example: 42
        user_id:
          type: integer
          example: 42
        content:
          type: string
          maxLength: 200
          example: im a puppet on a string, tracy island time travelling diamond, coulda shaped heartaches