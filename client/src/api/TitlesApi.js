/*
 * FMD
 * A website for movies' and TV shows' reviews
 *
 * OpenAPI spec version: 3.0.0
 * Contact: om.dehlantube@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Movie} from '../model/Movie';
import {Title} from '../model/Title';
import {Tvshow} from '../model/Tvshow';

/**
* Titles service.
* @module api/TitlesApi
* @version 3.0.0
*/
export class TitlesApi {

    /**
    * Constructs a new TitlesApi. 
    * @alias module:api/TitlesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the movieGet operation.
     * @callback moduleapi/TitlesApi~movieGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Movie>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sort/Filter movies
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.genre Genres to be filtered by
     * @param {module:model/String} opts.sortTypeBrowse Parameter based on which titles will be sorted
     * @param {Boolean} opts.sortOrder sorting order
     * @param {module:api/TitlesApi~movieGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    movieGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'genre': this.apiClient.buildCollectionParam(opts['genre'], 'multi'),'sort_type_browse': opts['sortTypeBrowse'],'sort_order': opts['sortOrder']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Movie];

      return this.apiClient.callApi(
        '/movie', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the movieIdGet operation.
     * @callback moduleapi/TitlesApi~movieIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Movie{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a Movie
     * Returns information about a particular Movie, including its title, genre, director, actors, release date, and description.
     * @param {Number} id ID of the Movie
     * @param {module:api/TitlesApi~movieIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    movieIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling movieIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Movie;

      return this.apiClient.callApi(
        '/movie/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchGet operation.
     * @callback moduleapi/TitlesApi~searchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Title>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain all movies/shows whose prefix matches the input expression
     * @param {String} expression the expression to be searched
     * @param {module:api/TitlesApi~searchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    searchGet(expression, callback) {
      
      let postBody = null;
      // verify the required parameter 'expression' is set
      if (expression === undefined || expression === null) {
        throw new Error("Missing the required parameter 'expression' when calling searchGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'expression': expression
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Title];

      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the titleGet operation.
     * @callback moduleapi/TitlesApi~titleGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Title>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sort/Filter Movies and TV Shows
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.genre Genres to be filtered by
     * @param {module:model/String} opts.sortTypeBrowse Parameter based on which titles will be sorted
     * @param {Boolean} opts.sortOrder sorting order
     * @param {module:api/TitlesApi~titleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    titleGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'genre': this.apiClient.buildCollectionParam(opts['genre'], 'multi'),'sort_type_browse': opts['sortTypeBrowse'],'sort_order': opts['sortOrder']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Title];

      return this.apiClient.callApi(
        '/title', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tvshowGet operation.
     * @callback moduleapi/TitlesApi~tvshowGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tvshow>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sort/Filter TV Shows
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.genre Genres to be filtered by
     * @param {module:model/String} opts.sortTypeBrowse Parameter based on which titles will be sorted
     * @param {Boolean} opts.sortOrder sorting order
     * @param {module:api/TitlesApi~tvshowGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tvshowGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'genre': this.apiClient.buildCollectionParam(opts['genre'], 'multi'),'sort_type_browse': opts['sortTypeBrowse'],'sort_order': opts['sortOrder']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Tvshow];

      return this.apiClient.callApi(
        '/tvshow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tvshowIdGet operation.
     * @callback moduleapi/TitlesApi~tvshowIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tvshow{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a TV Show
     * Returns information about a particular TV Show, including its title, genre, director, actors, release date, and description.
     * @param {Number} id ID of the TV Show
     * @param {module:api/TitlesApi~tvshowIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tvshowIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tvshowIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tvshow;

      return this.apiClient.callApi(
        '/tvshow/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}